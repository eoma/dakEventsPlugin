<?php

/**
 * festival
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kvarteret_events
 * @subpackage model
 * @author     Endre Oma
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PlugindakFestival extends BasedakFestival
{

  protected $purifier = null;

  /**
   * As festivals tend to be repeated, add start date to festival title
   * when printing object as string
   */
  public function __toString() {
    return $this->getTitle() . ' ' . $this->getStartDate();
  }

  /**
   * Returns common location if location_id is set, 
   * if not it will return custom location
   */
  public function getLocation ()
  {
    if (!$this->location_id) {
      return $this->customLocation;
    } else {
      return $this->getCommonLocation()->getRenderedLocationHierarchy();
    }
  }

  /**
   * Will check if myHTMLPurifier has been initiated, if not, initiate it.
   */
  protected function myHTMLPurifierInstance() {
    if (empty($this->purifier)) $this->purifier = new myHTMLPurifier();
  }

  /**
   * setDescription will escape and remove illegal tags and script in description.
   * We'll only allow certain tags, and certain attributes on tags
   */
  public function setDescription ($value) {
    $this->myHTMLPurifierInstance();

    $this->_set('description', trim($this->purifier->commonHtml($value)));
  }

  public function setLeadParagraph ($value) {
    $this->myHTMLPurifierInstance();

    $this->_set('leadParagraph', trim($this->purifier->blockHtml($value)));
  }

  public function postSave($event) {
    parent::postSave($event);

	// Takes care of notifying eventlisteners that
	// some data hase changed
    $dispatcher = ProjectConfiguration::getActive()->getEventDispatcher();

     $dispatcher->notify(new sfEvent(null, 'dak.festival.saved', array('id' => $this->getId())));
 }

  public function postDelete($event) {
    parent::postDelete($event);

    $dispatcher = ProjectConfiguration::getActive()->getEventDispatcher();

    $dispatcher->notify(new sfEvent(null, 'dak.festival.deleted', array('id' => $this->getId())));

  }
}
